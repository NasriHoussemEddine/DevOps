pipeline {
    agent any

    tools {
        maven "Maven"
    }

    environment {
        DOCKER_HUB_TOKEN = credentials('docker-hub-key')
        GITHUB_TOKEN = credentials('token2')
        SONAR_TOKEN = credentials('sonarqube2')
        URL_SONAR = 'http://192.168.157.146:9000'
        VM_IP = '192.168.157.146'
        VM_PORT = '8081'
        NEXUS_DOCKER_LOGIN = "http://192.168.157.146:5000"
        NEXUS_DOCKER_REPO = "192.168.157.146:5000/repository/docker-repo"
        NEXUS_USERNAME = 'admin'
        NEXUS_PASSWORD = '0000'
    }

    stages {
        stage('Checkout') {
            steps {
                echo '>>> Starting the Checkout Stage: Cloning the repository from GitHub...'
                git branch: 'main', url: 'https://github.com/NasriHoussemEddine/DevOps.git'
            }
        }

        stage('Build') {
            steps {
                echo '>>> Beginning the Build Stage: Compiling the project and skipping tests...'
                sh "mvn clean package -DskipTests"
                script {
                    def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    def versionMatch = commitMessage =~ /v\d+\.\d+\.\d+/
                    if (versionMatch) {
                        env.VERSION = versionMatch[0]
                    } else {
                        error("No valid version found in commit message")
                    }

                }
            }
        }

        stage('SonarQube') {
            steps {
                echo '>>> Initiating SonarQube Analysis Stage: Performing code quality checks...'
                withCredentials([string(credentialsId: 'sonarqube2', variable: 'SONAR_TOKEN')]) {
                    sh "mvn sonar:sonar -Dsonar.projectKey=devops_project -Dsonar.host.url=${URL_SONAR} -Dsonar.login=${SONAR_TOKEN} -Dsonar.java.binaries=target/classes"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '>>> Starting Docker Image Build Stage: Creating the Docker image...'
                sh "docker build -t houssemnasri/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION} ."
            }
        }

        stage('Docker Login and Push to Docker Hub') {
            steps {
                echo '>>> Preparing to Push Docker Image: Logging into Docker Hub...'
                script {
                    sh "echo ${DOCKER_HUB_TOKEN} | docker login -u houssemnasri --password-stdin"
                    sh "docker push houssemnasri/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION}"
                }
            }
        }

        stage('Deploy Docker Image to Nexus') {
                    steps {
                        echo '>>> Deploying Docker Image: Logging into Nexus and pushing the image...'
                        script {
                            sh "echo ${NEXUS_PASSWORD} | docker login -u ${NEXUS_USERNAME} --password-stdin ${NEXUS_DOCKER_LOGIN}"
                            sh "docker tag houssemnasri/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION} ${NEXUS_DOCKER_REPO}/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION}"
                            sh "docker push ${NEXUS_DOCKER_REPO}/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION}"
                        }
                    }
                }

                stage('Remove Nexus-Tagged Docker Image') {
                    steps {
                        echo '>>> Removing Nexus-Tagged Docker Image...'
                        script {
                            sh "docker rmi ${NEXUS_DOCKER_REPO}/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION}"
                        }
                    }
                }

                stage('Pull Docker Image') {
                    steps {
                        echo '>>> Pulling Docker Image: Fetching the image from Docker Hub...'
                        sh "docker pull houssemnasri/houssemnasri-4carctic-g1-tpachatproject-backend:${env.VERSION}"
                    }
                }
    }

    post {
        success {
            echo '>>> Build successful, sending email notification...'
            emailext (
                subject: "Build Successful",
                body: """
                    The build of the Backend-CI was successful!

                    You can trigger the Backend-CD build using the following link:

                    http://admin:EmailToken@192.168.157.146:8080/job/Backend-CD/build?token=EmailToken
                """,
                recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                from: 'sabrinetteissaoui27@gmail.com',
                to: 'nhoucem44@gmail.com'
            )
        }
        failure {
            echo '>>> Build failed, no email sent.'
        }

    }

}
